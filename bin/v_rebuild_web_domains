#!/bin/bash
# info: rebuild dns domains
# options: user
#
# The function rebuilds BIND configuration files for all dns domains.


#----------------------------------------------------------#
#                    Variable&Function                     #
#----------------------------------------------------------#

# Argument defenition
user=$1

# Importing variables
source $VESTA/conf/vars.conf
source $V_CONF/vesta.conf
source $V_FUNC/shared.func
source $V_FUNC/domain.func
source $V_FUNC/ip.func

url=${2-$V_SUSPEND_URL}

#----------------------------------------------------------#
#                    Verifications                         #
#----------------------------------------------------------#

# Checking arg number
check_args '1' "$#" 'user [suspend_url]'

# Checking argument format
format_validation 'user' 'url'

# Checking web system is enabled
is_system_enabled 'web'

# Checking user
is_user_valid

# Checking user is active
is_user_suspended


#----------------------------------------------------------#
#                       Action                             #
#----------------------------------------------------------#

# Clean up old config
rm -f $V_HOME/$user/conf/tmp_*.conf

# Defining config
conf=$V_USERS/$user/web.conf
fields='$DOMAIN'
nohead=1

# Starting loop
for domain in $(shell_list) ; do
    domain_idn=$(idn -t --quiet -a "$domain")

    # Parsing domain values
    get_web_domain_values

    # Preparing domain values for the template substitution
    upd_web_domain_values

    # Adding domain to the tmp_httpd.conf
    tpl_file="$V_WEBTPL/apache_$TPL.tpl"
    conf="$V_HOME/$user/conf/web/tmp_httpd.conf"
    add_web_config
    chown root:apache $conf
    chmod 640 $conf

    # Running template trigger
    if [ -x $V_WEBTPL/apache_$TPL.sh ]; then
        $V_WEBTPL/apache_$TPL.sh $user $domain $ip $V_HOME $docroot
    fi

    # Checking stats
    if [ ! -z "$STATS" ]; then
    cat $V_WEBTPL/$STATS.tpl |\
        sed -e "s/%ip%/$ip/g" \
            -e "s/%web_port%/$WEB_PORT/g" \
            -e "s/%web_ssl_port%/$WEB_SSL_PORT/g" \
            -e "s/%proxy_port%/$PROXY_PORT/g" \
            -e "s/%proxy_ssl_port%/$PROXY_SSL_PORT/g" \
            -e "s/%domain_idn%/$domain_idn/g" \
            -e "s/%domain%/$domain/g" \
            -e "s/%user%/$user/g" \
            -e "s/%home%/${V_HOME////\/}/g" \
            -e "s/%alias%/${aliases//,/ }/g" \
            -e "s/%alias_idn%/${aliases_idn//,/ }/g" \
        > $V_HOME/$user/conf/web/$STATS.$domain.conf

        stats_string="$V_BIN/v_update_web_domain_stat $user $domain"
        check_stats_pipe=$(grep "$stats_string" $V_QUEUE/stats.pipe)
        if [ -z "$check_stats_pipe" ]; then
            echo "$stats_string" >> $V_QUEUE/stats.pipe
        fi
    fi

    # Checking ssl
    if [ "$SSL" = 'yes' ]; then
        # Adding domain to the shttpd.conf
        conf="$V_HOME/$user/conf/web/tmp_shttpd.conf"
        tpl_file="$V_WEBTPL/apache_$TPL.stpl"
        add_web_config
        chown root:apache $conf
        chmod 640 $conf

        cp -f $V_USERS/$user/ssl/$domain.crt \
            $V_HOME/$user/conf/web/ssl.$domain.crt
        cp -f $V_USERS/$user/ssl/$domain.key \
            $V_HOME/$user/conf/web/ssl.$domain.key
        cp -f $V_USERS/$user/ssl/$domain.pem \
            $V_HOME/$user/conf/web/ssl.$domain.pem
        if [ -e "$V_USERS/$user/ssl/$domain.ca" ]; then
            cp -f $V_USERS/$user/ssl/$domain.ca \
                $V_HOME/$user/conf/web/ssl.$domain.ca
        fi

        # Running template trigger
        if [ -x $V_WEBTPL/apache_$TPL.sh ]; then
            $V_WEBTPL/apache_$TPL.sh $user $domain $ip $V_HOME $docroot
        fi

        ssl_change='yes'
    fi

    # Checking nginx
    if [ ! -z "$NGINX" ]; then
        tpl_file="$V_WEBTPL/ngingx_vhost_$NGINX.tpl"
        conf="$V_HOME/$user/conf/web/tmp_nginx.conf"
        add_web_config
        chown root:nginx $conf
        chmod 640 $conf

        if [ "$SSL" = 'yes' ]; then
            if [ "$SUSPEND" = 'yes' ]; then
                proxy_string="rewrite ^(.*)\$ http://$url;"
            else
                proxy_string="proxy_pass     https://$ip:$WEB_SSL_PORT;"
            fi
    
            tpl_file="$V_WEBTPL/ngingx_vhost_$NGINX.stpl"
            conf="$V_HOME/$user/conf/web/tmp_snginx.conf"
            add_web_config
            chown root:nginx $conf
            chmod 640 $conf
        fi
	ngix_change='yes'
    fi
done

# Renaming tmp config
tmp_conf="$V_HOME/$user/conf/web/tmp_httpd.conf"
conf="$V_HOME/$user/conf/web/httpd.conf"
if [ -e "$tmp_conf" ]; then
    mv $tmp_conf $conf
fi

# Checking include in main httpd.conf
main_conf='/etc/httpd/conf.d/vesta.conf'
main_conf_check=$(grep "$conf" $main_conf )
if [ ! -z "$domain" ] && [ -z "$main_conf_check" ]; then
    echo "Include $conf" >>$main_conf
fi

# Checking ssl 
if [ "$ssl_change" = 'yes' ]; then
    tmp_conf="$V_HOME/$user/conf/web/tmp_shttpd.conf"
    conf="$V_HOME/$user/conf/web/shttpd.conf"
    mv $tmp_conf $conf

    # Checking include in main httpd.conf
    main_conf_check=$(grep "$conf" $main_conf )
    if [ -z "$main_conf_check" ]; then
        echo "Include $conf" >>$main_conf
    fi
fi

# Checking nginx
if [ "$ngix_change" = 'yes' ]; then
    nginx_conf='/etc/nginx/conf.d/vesta_users.conf'
    tmp_conf="$V_HOME/$user/conf/web/tmp_nginx.conf"
    conf="$V_HOME/$user/conf/web/nginx.conf"
    mv $tmp_conf $conf

    nginx_conf_check=$(grep "$conf" $nginx_conf )
    if [ -z "$nginx_conf_check" ]; then
        echo "include $conf;" >>$nginx_conf
    fi

    # Checking ssl for nginx
    if [ "$ssl_change" = 'yes' ]; then
        tmp_conf="$V_HOME/$user/conf/web/tmp_snginx.conf"
        conf="$V_HOME/$user/conf/web/snginx.conf"
        mv $tmp_conf $conf
        nginx_conf_check=$(grep "$conf" $nginx_conf )
        if [ -z "$nginx_conf_check" ]; then
            echo "include $conf;" >>$nginx_conf
        fi
    fi
fi

#----------------------------------------------------------#
#                       Vesta                              #
#----------------------------------------------------------#

# Adding task to the vesta pipe
restart_schedule 'web'

# Logging
log_event 'system' "$V_EVENT"

exit
